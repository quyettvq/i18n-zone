module.exports=function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n),t.d(n,"translate",(function(){return b})),t.d(n,"settings",(function(){return r})),t.d(n,"runtimeValidator",(function(){return o}));var r={};t.r(r),t.d(r,"setLocale",(function(){return s})),t.d(r,"setDefaultLocale",(function(){return a})),t.d(r,"getLocale",(function(){return i})),t.d(r,"getDefaultLocale",(function(){return l})),t.d(r,"setResource",(function(){return c})),t.d(r,"getResource",(function(){return f})),t.d(r,"setResources",(function(){return d})),t.d(r,"getResources",(function(){return h})),t.d(r,"setNumberFormatter",(function(){return g})),t.d(r,"getNumberFormatter",(function(){return p}));var o={};t.r(o),t.d(o,"validateResources",(function(){return v}));const u={locale:"en",defaultLocale:"en",resources:{},numberFormatter:(e,n,t)=>Number(e).toLocaleString(n,t)};function s(e){u.locale=e}function a(e){u.defaultLocale=e}function i(){return u.locale}function l(){return u.defaultLocale}function c(e,n){u.resources[e]=n}function f(e){return u.resources[e]}function d(e){u.resources=e}function h(){return u.resources}function g(e){u.numberFormatter=e}function p(){return u.numberFormatter}const m={};var x=function(e,n){n!==l()&&(m.hasOwnProperty(n)||(m[n]={}),m[n].hasOwnProperty(e)||(m[n][e]="",console.warn(`(i18n/resources) not found: ${n} -> ${e}`)))};var b=function(e,n=null,t=i()){const r=function(e,n){if(f(n).hasOwnProperty(e))return f(n)[e];return x(e,n),e}(e,t);if(null===n)return r;const[o,u]=function(e){let n="",t=[];return function(e,n,t){const r=/\[(.*?[\]\s]*)]/g,o=[0],u=new Map;let s;for(;;){if(s=r.exec(e),null===s){o.push(e.length);break}const[n,t]=s;o.push(s.index),o.push(s.index+n.length),u.set(s.index,t)}for(let r=0;r<o.length-1;r++){const s=o[r],a=o[r+1],i=e.substring(s,a);if(r%2==0){t(i,s);continue}const l=u.get(s);n(l,i,s)}}(e,(e,r,o)=>{n+=r.replace(/[^\s]/g,"z");t.push({escapedSubtext:e,subtext:r,sliceIndex:o,sliceIndexChange:0,retainedInResult:true})},(e,t)=>{n+=e}),[n,t]}(r);return function(e,n){let t=0;return n.forEach(n=>{if(!n.retainedInResult)return;const r=n.sliceIndex+n.sliceIndexChange+t,o=e.substring(0,r),u=e.substring(r+n.subtext.length,e.length);e=o+n.escapedSubtext+u,t+=n.escapedSubtext.length-n.subtext.length}),e}(function(e,n,t,r,o){return e.replace(/(:)([a-zA-Z_][a-zA-Z0-9_]*)(?:(\(\s*([A-Z]+)\s*)(|,.+?)\))?/g,(e,u,s,a="",i="",l="",c)=>{const f=function(e,n,t,r,o,u){if(void 0===e)return console.error(`(i18n/translate) value for param: ${n} is not provided when translate message: ${o}`),{value:n};if(e instanceof Array)return function(e,n){return{value:e.join(", ")}}(e);if("number"==typeof e)return"PLURAL"===t?function(e,n,t){const r=p()(e,t),o=e=>{const n=[];return{value:e.replace(/:@/g,(e,t)=>(n.push({index:t,oldLength:e.length,newLength:r.length}),r)),paramReplacements:n}},u=/(,\s*(?:(?:(|>=|<=|>|<)(\d+))|!)\s)([^,]+)/g;let s;for(;;){if(s=u.exec(n),null===s)break;const[t,r,a,i,l]=s,c=s.index+r.length,f=l.length;if(void 0===i)return{...o(l),origin:{index:c,length:f}};const d=Number(e),h=Number(i);if(">"===a&&d>h||">="===a&&d>=h||"<"===a&&d<h||"<="===a&&d<=h||""===a&&d===h)return{...o(l),origin:{index:c,length:f}}}return{value:r}}(e,r,u):function(e,n){return{value:p()(e,n)}}(e,u);return{value:String(e)}}(t[s],s,i,l,r,o),d=(u+s+a).length;return function(e,n,t,r,o,u=null,s={index:0,length:0}){e.forEach(e=>{if(e.sliceIndex<n)return;if(e.sliceIndex>=n+t)return void(e.sliceIndexChange+=o.length-t);const a=r+s.index,i=n+a;e.sliceIndex<i||e.sliceIndex>=i+s.length?e.retainedInResult=!1:(e.sliceIndexChange+=-a,null!==u&&u.forEach(({index:t,oldLength:o,newLength:u})=>{const a=n+r+s.index+t;e.sliceIndex>=a+o&&(e.sliceIndexChange+=u-o)}))})}(n,c,e.length,d,f.value,f.paramReplacements,f.origin),f.value})}(o,u,n,e,t),u)};function v(){const e=h(),n={};for(let t in e)if(e.hasOwnProperty(t)){const r={};for(let n in e[t])if(e[t].hasOwnProperty(n)){const o=y(n,e[t][n]);o.length>0&&(r[n]=o)}Object.keys(r).length>0&&(n[t]=r)}return Object.keys(n).length>0?n:null}function y(e,n){const t=[],r=/^[a-zA-Z_][a-zA-Z0-9_]*(?:\{([a-zA-Z_][a-zA-Z0-9_]*(?:,[a-zA-Z_][a-zA-Z0-9_]*)*)\})?$/.test(e);e.trim()!==e&&t.push("ID should not start or end with white-space"),n.trim()!==n&&t.push("Message should not start or end with white-space");e.length>99&&(r?t.push(`ID too long: ${e.length}. Expected <= 99`):t.push(`ID too long: ${e.length}. Expected <= 99. Please consider to use variable-style ID`));const o=w(n);n.length>19&&0===o.length&&!/\s/.test(n)&&t.push('Message should be a human-readable sentence/text which includes words instead of a "long word" without separating by white-space. Max length of a single-word message: 19');const u=r?function(e){const n=e.match(/^[a-zA-Z_][a-zA-Z0-9_]*(?:\{([a-zA-Z_][a-zA-Z0-9_]*(?:,[a-zA-Z_][a-zA-Z0-9_]*)*)\})?$/);if(void 0===n[1])return[];return n[1].split(",")}(e):w(e);if(o.length===u.length)for(let e=0;e<u.length;e++)u[e]!==o[e]&&t.push(`Param at ${e} of ID and message is not the same: ${u[e]} vs ${o[e]}`);else r&&0===u.length?t.push("Variable-style IDs need to end with a list of params which are the same used in the message if any. Syntax: an_awesome_id{meaningParam,greatParamAbc,numOfItems}. Note that white-spaces are not accepted"):t.push(`ID params length: ${u.length} is not equal to message params length: ${o.length}`);return t}function w(e){const n=[],t=/(:)([a-zA-Z_][a-zA-Z0-9_]*)(?:(\(\s*([A-Z]+)\s*)(|,.+?)\))?/g;for(;;){const r=t.exec(e);if(null===r)break;const[o,u,s]=r;n.push(s)}return n}}]);